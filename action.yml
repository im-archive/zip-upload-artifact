name: Zip & Upload Artifact

description: Zips Artifact and then Uploads it to GitHub

inputs:
  # These are the same inputs as the Upload Artifact action.
  # https://github.com/actions/upload-artifact
  name:
    description: The Artifact name
    default: artifact
  path:
    description: A file, directory, or wildcard pattern that describes what to upload
    required: true
  if-no-files-found:
    description: |
      The action to take if no files are found at the path:

      Options:
      - warn: Warning sent, but build does not fail
      - error: Error sent, and build fails
      - info: Nothing sent, and build does not fail
    default: warn
  retention-days:
    description: |
      The number of days to retain the artifact before it expires. Value cannot be over 30 days
    default: '15'

runs:
  using: 'composite'
  steps:
    - name: Create Artifact Zip File
      shell: python
      run: |
        import os
        import glob
        import zipfile

        # NOTE: 
        # This python code has been written inline, instead of a standalone file, so it 
        # can be run without running into file system issues finding files and paths.

        def get_paths(path: str, list_type: str) -> list:
          paths = []
          if isinstance(path, list):
            for item in path:
              print(f"Discover all {list_type} paths from {item}")

              path_value = None                
              if list_type == "excluded":
                if item.startswith("!"):                    
                  path_value = item[1:].strip()
              else:
                path_value = item.strip()

              if path_value:
                if os.path.isdir(path_value) and not path_value.endswith("**"):
                  path_value = os.path.join(path_value, "**")
                
                discovered_paths = glob.glob(path_value, recursive=True)
                print(f"Discovered {len(discovered_paths)} {list_type} paths: {', '.join(discovered_paths)}")
                paths.extend(discovered_paths)

          return paths

        print()
        print("####################################################")
        print("Creating Artifact Zip")
        print("####################################################")

        print("Inputs")    
        file_name = os.environ['FILE_NAME']
        print(f"- Name: {file_name}")
                
        file_path = os.environ['FILE_PATH'].splitlines()
        print(f"- Path: {', '.join(file_path)}")
        print("")

        included_paths = get_paths(file_path, list_type="included")
        excluded_paths = get_paths(file_path, list_type="excluded")

        zip_name = f"{file_name}.zip"
        file_count = 0
        with zipfile.ZipFile(zip_name, "w", zipfile.ZIP_DEFLATED) as zip_writer:
          print(f"Creating {zip_name}:")
          for path in included_paths:
            if path not in excluded_paths:                
                zip_writer.write(path)
                file_count += 1

        print("")
        print(f"DONE: Added {file_count} files to {zip_name}.")     
        print("")
      env:
        FILE_NAME: ${{ inputs.name }}
        FILE_PATH: ${{ inputs.path }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.name}}.zip
        if-no-files-found: ${{ inputs.if-no-files-found }}
        retention-days: ${{ inputs.retention-days }}
