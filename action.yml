name: Zip & Upload Artifact

description: Zips Artifact and then Uploads it to GitHub

inputs:
  # These are the same inputs as the Upload Artifact action.
  # https://github.com/actions/upload-artifact
  name:
    description: The Artifact name
    default: artifact
  path:
    description: A file, directory, or wildcard pattern that describes what to upload
    required: true
  if-no-files-found:
    description: |
      The action to take if no files are found at the path:

      Options:
      - warn: Warning sent, but build does not fail
      - error: Error sent, and build fails
      - info: Nothing sent, and build does not fail
    default: warn
  retention-days:
    description: |
      The number of days to retain the artifact before it expires. Value cannot be over 30 days
    default: '15'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Create Artifact Zip File
      shell: python
      run: |
        import os
        import glob
        import zipfile

        # NOTE: 
        # This python code has been written inline, instead of a standalone file, so it 
        # can be run without running into file system issues finding files and paths.

        def get_root_paths(path: str) -> list:
          root_paths = []
          if isinstance(path, list):
            for item in path:
              if item.startswith("!"):
                continue
              elif os.path.isdir(item):
                root_paths.append(item)
              else:
                root_paths.append(os.path.dirname(item))
          else:
            if os.path.isdir(path):
              root_paths.append(path)
            else:
              root_paths.append(os.path.dirname(path))
          return root_paths
        
        def get_leading_path(current_path: str, root_paths: list) -> str:
          best_match = None
          match_length = 0
          for root_path in root_paths:
            # get path with the best match
            # if have temp and temp/subfolder as root paths, and the current path is temp/subfolder/sub2 we want to return temp/subfolder
            if current_path.startswith(root_path) and len(root_path) > match_length:
              best_match = root_path
              match_length = len(root_path)
          return best_match

        def get_paths(path: str, list_type: str) -> list:
          paths = []
          print("")
          print(f"Discover all {list_type} paths from {', '.join(path)}")
          type_excluded = "excluded"
          if isinstance(path, list):
            for item in path:
              path_value = None
              # excluded paths start with !
              if list_type == type_excluded:
                if item.startswith("!"):                    
                  path_value = item[1:].strip()
              else:
                path_value = item.strip()

              if path_value:
                # if the path is a directory, then add ** to the end to include all files subdirectories
                if os.path.isdir(path_value) and not path_value.endswith("**"):
                  path_value = os.path.join(path_value, "**")
                
                discovered_paths = glob.glob(path_value, recursive=True)
                paths.extend(discovered_paths)

          print(f"Discovered {len(paths)} {list_type} paths: {', '.join(paths)}")
          return paths

        print()
        print("####################################################")
        print("Creating Artifact Zip")
        print("####################################################")

        print("Inputs")    
        file_name = os.environ['FILE_NAME']
        print(f"- Name: {file_name}")
                
        file_path = os.environ['FILE_PATH'].splitlines()
        print(f"- Path: {', '.join(file_path)}")

        root_paths = get_root_paths(file_path)
        included_paths = get_paths(file_path, list_type="included")
        excluded_paths = get_paths(file_path, list_type="excluded")

        zip_name = f"{file_name}.zip"
        with zipfile.ZipFile(zip_name, "w", zipfile.ZIP_DEFLATED) as zip_writer:
          print("")
          print(f"Creating {zip_name}:")
          for path in included_paths:
            if path not in excluded_paths:
                leading_path = get_leading_path(path, root_paths)
                zip_path = os.path.relpath(path, start=leading_path)
                if zip_path == "" or zip_path == ".":
                  continue

                print(f"- Adding {zip_path}")
                zip_writer.write(path, arcname=zip_path)

        print("")
        print(f"DONE: Created {zip_name}.")     
        print("")
      env:
        FILE_NAME: ${{ inputs.name }}
        FILE_PATH: ${{ inputs.path }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.name}}.zip
        if-no-files-found: ${{ inputs.if-no-files-found }}
        retention-days: ${{ inputs.retention-days }}
